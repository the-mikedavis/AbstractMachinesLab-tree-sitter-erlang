================================================================================
macro usage
================================================================================

?MY_MACRO

--------------------------------------------------------------------------------

(source_file
  (expr_macro_application
    (variable)))

================================================================================
macro application
================================================================================

?MY_MACRO(2)
?MY_MACRO(2, [1])
?MY_MACRO(2, [1], ?MY_MACRO_EXTRA)

--------------------------------------------------------------------------------

(source_file
  (expr_macro_application
    (variable)
    (integer))
  (expr_macro_application
    (variable)
    (integer)
    (expr_list
      (integer)))
  (expr_macro_application
    (variable)
    (integer)
    (expr_list
      (integer))
    (expr_macro_application
      (variable))))

================================================================================
macros in patterns
================================================================================

is_test(?TEST) -> true.

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    (function_clause
      (atom)
      (lambda_clause
        (pattern
          (expr_macro_application
            (variable)))
        (atom)))))

================================================================================
macros in types
================================================================================

-type state() :: #?MODULE{}.
-spec descend(?ROOT | ?NODE) -> ?NODE.

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (atom)
    (type_expression
      (type_record
        (expr_macro_application
          (variable)))))
  (function_spec
    (atom)
    (type_expression
      (expr_macro_application
        (variable))
      (expr_macro_application
        (variable)))
    (type_expression
      (expr_macro_application
        (variable)))))

================================================================================
macro definition
================================================================================

-define(ASM_CACHE_KEY(Module, Checksum),
        {?MODULE, asm_cache, Module, Checksum}).
-define(Const, Replacement).
-define(MACRO1(X, Y), {a, X, b, Y}).
-define(assertStandaloneFun(Expression),
        ?assertMatch(#standalone_fun{}, ?make_standalone_fun(Expression))).

--------------------------------------------------------------------------------

(source_file
  (macro_declaration
    (variable)
    (pattern
      (variable))
    (pattern
      (variable))
    (tuple
      (expr_macro_application
        (variable))
      (atom)
      (variable)
      (variable)))
  (macro_declaration
    (variable)
    (variable))
  (macro_declaration
    (variable)
    (pattern
      (variable))
    (pattern
      (variable))
    (tuple
      (atom)
      (variable)
      (atom)
      (variable)))
  (macro_declaration
    (atom)
    (pattern
      (variable))
    (expr_macro_application
      (atom)
      (record
        (atom))
      (expr_macro_application
        (atom)
        (variable)))))

================================================================================
anonymous capture within a macro
================================================================================

-define(PASS(N), {N,fun N/1}).

--------------------------------------------------------------------------------

(source_file
  (macro_declaration
    (variable)
    (pattern
      (variable))
    (tuple
      (variable)
      (expr_function_capture
        (computed_function_name)
        (integer)))))

================================================================================
macro containing bitstring syntax
================================================================================

-define(UINT32(X), X:32/unsigned-big-integer).

--------------------------------------------------------------------------------

(source_file
  (macro_declaration
    (variable)
    (pattern
      (variable))
    (bin_part
      (variable)
      (bin_sized
        (integer))
      (bin_type_list
        (bin_type)
        (bin_type)
        (bin_type)))))
